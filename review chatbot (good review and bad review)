{
  "nodes": [
    {
      "id": "llmChain_0",
      "position": {
        "x": 878.9768961138789,
        "y": -109.81400757295364
      },
      "type": "customNode",
      "data": {
        "id": "llmChain_0",
        "label": "LLM Chain",
        "version": 3,
        "name": "llmChain",
        "type": "LLMChain",
        "baseClasses": [
          "LLMChain",
          "BaseChain",
          "Runnable"
        ],
        "category": "Chains",
        "description": "Chain to run queries against LLMs",
        "inputParams": [
          {
            "label": "Chain Name",
            "name": "chainName",
            "type": "string",
            "placeholder": "Name Your Chain",
            "optional": true,
            "id": "llmChain_0-input-chainName-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Language Model",
            "name": "model",
            "type": "BaseLanguageModel",
            "id": "llmChain_0-input-model-BaseLanguageModel"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "BasePromptTemplate",
            "id": "llmChain_0-input-prompt-BasePromptTemplate"
          },
          {
            "label": "Output Parser",
            "name": "outputParser",
            "type": "BaseLLMOutputParser",
            "optional": true,
            "id": "llmChain_0-input-outputParser-BaseLLMOutputParser"
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "llmChain_0-input-inputModeration-Moderation"
          }
        ],
        "inputs": {
          "model": "{{openAI_0.data.instance}}",
          "prompt": "{{promptTemplate_0.data.instance}}",
          "outputParser": "{{structuredOutputParser_0.data.instance}}",
          "inputModeration": "",
          "chainName": "sentiment"
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "llmChain_0-output-llmChain-LLMChain|BaseChain|Runnable",
                "name": "llmChain",
                "label": "LLM Chain",
                "description": "",
                "type": "LLMChain | BaseChain | Runnable"
              },
              {
                "id": "llmChain_0-output-outputPrediction-string|json",
                "name": "outputPrediction",
                "label": "Output Prediction",
                "description": "",
                "type": "string | json"
              }
            ],
            "default": "llmChain"
          }
        ],
        "outputs": {
          "output": "outputPrediction"
        },
        "selected": false
      },
      "width": 300,
      "height": 508,
      "selected": false,
      "positionAbsolute": {
        "x": 878.9768961138789,
        "y": -109.81400757295364
      },
      "dragging": false
    },
    {
      "id": "openAI_0",
      "position": {
        "x": 241.8094934133846,
        "y": -796.6212623097109
      },
      "type": "customNode",
      "data": {
        "id": "openAI_0",
        "label": "OpenAI",
        "version": 4,
        "name": "openAI",
        "type": "OpenAI",
        "baseClasses": [
          "OpenAI",
          "BaseLLM",
          "BaseLanguageModel",
          "Runnable"
        ],
        "category": "LLMs",
        "description": "Wrapper around OpenAI large language models",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "openAI_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "gpt-3.5-turbo-instruct",
            "id": "openAI_0-input-modelName-asyncOptions"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "step": 0.1,
            "default": 0.7,
            "optional": true,
            "id": "openAI_0-input-temperature-number"
          },
          {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-maxTokens-number"
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-topP-number"
          },
          {
            "label": "Best Of",
            "name": "bestOf",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-bestOf-number"
          },
          {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-frequencyPenalty-number"
          },
          {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-presencePenalty-number"
          },
          {
            "label": "Batch Size",
            "name": "batchSize",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-batchSize-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-basepath-string"
          },
          {
            "label": "BaseOptions",
            "name": "baseOptions",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "openAI_0-input-baseOptions-json"
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "openAI_0-input-cache-BaseCache"
          }
        ],
        "inputs": {
          "cache": "",
          "modelName": "gpt-3.5-turbo-instruct",
          "temperature": "0.8",
          "maxTokens": "",
          "topP": "",
          "bestOf": "",
          "frequencyPenalty": "",
          "presencePenalty": "",
          "batchSize": "",
          "timeout": "",
          "basepath": "",
          "baseOptions": ""
        },
        "outputAnchors": [
          {
            "id": "openAI_0-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
            "name": "openAI",
            "label": "OpenAI",
            "description": "Wrapper around OpenAI large language models",
            "type": "OpenAI | BaseLLM | BaseLanguageModel | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 574,
      "selected": false,
      "positionAbsolute": {
        "x": 241.8094934133846,
        "y": -796.6212623097109
      },
      "dragging": false
    },
    {
      "id": "promptTemplate_0",
      "position": {
        "x": 245.8874230415082,
        "y": -23.112780659024452
      },
      "type": "customNode",
      "data": {
        "id": "promptTemplate_0",
        "label": "Prompt Template",
        "version": 1,
        "name": "promptTemplate",
        "type": "PromptTemplate",
        "baseClasses": [
          "PromptTemplate",
          "BaseStringPromptTemplate",
          "BasePromptTemplate",
          "Runnable"
        ],
        "category": "Prompts",
        "description": "Schema to represent a basic prompt for an LLM",
        "inputParams": [
          {
            "label": "Template",
            "name": "template",
            "type": "string",
            "rows": 4,
            "placeholder": "What is a good name for a company that makes {product}?",
            "id": "promptTemplate_0-input-template-string"
          },
          {
            "label": "Format Prompt Values",
            "name": "promptValues",
            "type": "json",
            "optional": true,
            "acceptVariable": true,
            "list": true,
            "id": "promptTemplate_0-input-promptValues-json"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "template": "Provide a comma seperated list of synonyms for the word: {word}.\n\n\n",
          "promptValues": "{\"word\":\"{{question}}\"}"
        },
        "outputAnchors": [
          {
            "id": "promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
            "name": "promptTemplate",
            "label": "PromptTemplate",
            "description": "Schema to represent a basic prompt for an LLM",
            "type": "PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 513,
      "selected": false,
      "positionAbsolute": {
        "x": 245.8874230415082,
        "y": -23.112780659024452
      },
      "dragging": false
    },
    {
      "id": "llmChain_1",
      "position": {
        "x": 2790.4907140332,
        "y": -969.1339204585418
      },
      "type": "customNode",
      "data": {
        "id": "llmChain_1",
        "label": "LLM Chain",
        "version": 3,
        "name": "llmChain",
        "type": "LLMChain",
        "baseClasses": [
          "LLMChain",
          "BaseChain",
          "Runnable"
        ],
        "category": "Chains",
        "description": "Chain to run queries against LLMs",
        "inputParams": [
          {
            "label": "Chain Name",
            "name": "chainName",
            "type": "string",
            "placeholder": "Name Your Chain",
            "optional": true,
            "id": "llmChain_1-input-chainName-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Language Model",
            "name": "model",
            "type": "BaseLanguageModel",
            "id": "llmChain_1-input-model-BaseLanguageModel"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "BasePromptTemplate",
            "id": "llmChain_1-input-prompt-BasePromptTemplate"
          },
          {
            "label": "Output Parser",
            "name": "outputParser",
            "type": "BaseLLMOutputParser",
            "optional": true,
            "id": "llmChain_1-input-outputParser-BaseLLMOutputParser"
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "llmChain_1-input-inputModeration-Moderation"
          }
        ],
        "inputs": {
          "model": "{{openAI_1.data.instance}}",
          "prompt": "{{promptTemplate_1.data.instance}}",
          "outputParser": "",
          "inputModeration": "",
          "chainName": "positive"
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "llmChain_1-output-llmChain-LLMChain|BaseChain|Runnable",
                "name": "llmChain",
                "label": "LLM Chain",
                "description": "",
                "type": "LLMChain | BaseChain | Runnable"
              },
              {
                "id": "llmChain_1-output-outputPrediction-string|json",
                "name": "outputPrediction",
                "label": "Output Prediction",
                "description": "",
                "type": "string | json"
              }
            ],
            "default": "llmChain"
          }
        ],
        "outputs": {
          "output": "llmChain"
        },
        "selected": false
      },
      "width": 300,
      "height": 508,
      "selected": false,
      "positionAbsolute": {
        "x": 2790.4907140332,
        "y": -969.1339204585418
      },
      "dragging": false
    },
    {
      "id": "llmChain_2",
      "position": {
        "x": 3371.429595785365,
        "y": 615.3140202979489
      },
      "type": "customNode",
      "data": {
        "id": "llmChain_2",
        "label": "LLM Chain",
        "version": 3,
        "name": "llmChain",
        "type": "LLMChain",
        "baseClasses": [
          "LLMChain",
          "BaseChain",
          "Runnable"
        ],
        "category": "Chains",
        "description": "Chain to run queries against LLMs",
        "inputParams": [
          {
            "label": "Chain Name",
            "name": "chainName",
            "type": "string",
            "placeholder": "Name Your Chain",
            "optional": true,
            "id": "llmChain_2-input-chainName-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Language Model",
            "name": "model",
            "type": "BaseLanguageModel",
            "id": "llmChain_2-input-model-BaseLanguageModel"
          },
          {
            "label": "Prompt",
            "name": "prompt",
            "type": "BasePromptTemplate",
            "id": "llmChain_2-input-prompt-BasePromptTemplate"
          },
          {
            "label": "Output Parser",
            "name": "outputParser",
            "type": "BaseLLMOutputParser",
            "optional": true,
            "id": "llmChain_2-input-outputParser-BaseLLMOutputParser"
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "llmChain_2-input-inputModeration-Moderation"
          }
        ],
        "inputs": {
          "model": "{{openAI_2.data.instance}}",
          "prompt": "{{promptTemplate_2.data.instance}}",
          "outputParser": "",
          "inputModeration": "",
          "chainName": "negative"
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "llmChain_2-output-llmChain-LLMChain|BaseChain|Runnable",
                "name": "llmChain",
                "label": "LLM Chain",
                "description": "",
                "type": "LLMChain | BaseChain | Runnable"
              },
              {
                "id": "llmChain_2-output-outputPrediction-string|json",
                "name": "outputPrediction",
                "label": "Output Prediction",
                "description": "",
                "type": "string | json"
              }
            ],
            "default": "llmChain"
          }
        ],
        "outputs": {
          "output": "llmChain"
        },
        "selected": false
      },
      "width": 300,
      "height": 508,
      "selected": false,
      "positionAbsolute": {
        "x": 3371.429595785365,
        "y": 615.3140202979489
      },
      "dragging": false
    },
    {
      "id": "openAI_1",
      "position": {
        "x": 2144.363096310701,
        "y": -1417.4980750073487
      },
      "type": "customNode",
      "data": {
        "id": "openAI_1",
        "label": "OpenAI",
        "version": 4,
        "name": "openAI",
        "type": "OpenAI",
        "baseClasses": [
          "OpenAI",
          "BaseLLM",
          "BaseLanguageModel",
          "Runnable"
        ],
        "category": "LLMs",
        "description": "Wrapper around OpenAI large language models",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "openAI_1-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "gpt-3.5-turbo-instruct",
            "id": "openAI_1-input-modelName-asyncOptions"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "step": 0.1,
            "default": 0.7,
            "optional": true,
            "id": "openAI_1-input-temperature-number"
          },
          {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-maxTokens-number"
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-topP-number"
          },
          {
            "label": "Best Of",
            "name": "bestOf",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-bestOf-number"
          },
          {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-frequencyPenalty-number"
          },
          {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-presencePenalty-number"
          },
          {
            "label": "Batch Size",
            "name": "batchSize",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-batchSize-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-basepath-string"
          },
          {
            "label": "BaseOptions",
            "name": "baseOptions",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "openAI_1-input-baseOptions-json"
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "openAI_1-input-cache-BaseCache"
          }
        ],
        "inputs": {
          "cache": "",
          "modelName": "gpt-3.5-turbo-instruct",
          "temperature": "0.7",
          "maxTokens": "",
          "topP": "",
          "bestOf": "",
          "frequencyPenalty": "",
          "presencePenalty": "",
          "batchSize": "",
          "timeout": "",
          "basepath": "",
          "baseOptions": ""
        },
        "outputAnchors": [
          {
            "id": "openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
            "name": "openAI",
            "label": "OpenAI",
            "description": "Wrapper around OpenAI large language models",
            "type": "OpenAI | BaseLLM | BaseLanguageModel | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 574,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 2144.363096310701,
        "y": -1417.4980750073487
      }
    },
    {
      "id": "promptTemplate_1",
      "position": {
        "x": 2189.7236839276316,
        "y": -533.4561514712093
      },
      "type": "customNode",
      "data": {
        "id": "promptTemplate_1",
        "label": "Prompt Template",
        "version": 1,
        "name": "promptTemplate",
        "type": "PromptTemplate",
        "baseClasses": [
          "PromptTemplate",
          "BaseStringPromptTemplate",
          "BasePromptTemplate",
          "Runnable"
        ],
        "category": "Prompts",
        "description": "Schema to represent a basic prompt for an LLM",
        "inputParams": [
          {
            "label": "Template",
            "name": "template",
            "type": "string",
            "rows": 4,
            "placeholder": "What is a good name for a company that makes {product}?",
            "id": "promptTemplate_1-input-template-string"
          },
          {
            "label": "Format Prompt Values",
            "name": "promptValues",
            "type": "json",
            "optional": true,
            "acceptVariable": true,
            "list": true,
            "id": "promptTemplate_1-input-promptValues-json"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "template": "you are a customer support assistant. first thank the client foff their review and ask if they would like to post the review to our wedsite.\nAlso summarize the review: {review}.",
          "promptValues": ""
        },
        "outputAnchors": [
          {
            "id": "promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
            "name": "promptTemplate",
            "label": "PromptTemplate",
            "description": "Schema to represent a basic prompt for an LLM",
            "type": "PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 513,
      "selected": false,
      "positionAbsolute": {
        "x": 2189.7236839276316,
        "y": -533.4561514712093
      },
      "dragging": false
    },
    {
      "id": "openAI_2",
      "position": {
        "x": 2270.0942347039936,
        "y": 335.5356261033887
      },
      "type": "customNode",
      "data": {
        "id": "openAI_2",
        "label": "OpenAI",
        "version": 4,
        "name": "openAI",
        "type": "OpenAI",
        "baseClasses": [
          "OpenAI",
          "BaseLLM",
          "BaseLanguageModel",
          "Runnable"
        ],
        "category": "LLMs",
        "description": "Wrapper around OpenAI large language models",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "openAI_2-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "gpt-3.5-turbo-instruct",
            "id": "openAI_2-input-modelName-asyncOptions"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "step": 0.1,
            "default": 0.7,
            "optional": true,
            "id": "openAI_2-input-temperature-number"
          },
          {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-maxTokens-number"
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-topP-number"
          },
          {
            "label": "Best Of",
            "name": "bestOf",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-bestOf-number"
          },
          {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-frequencyPenalty-number"
          },
          {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-presencePenalty-number"
          },
          {
            "label": "Batch Size",
            "name": "batchSize",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-batchSize-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-basepath-string"
          },
          {
            "label": "BaseOptions",
            "name": "baseOptions",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "openAI_2-input-baseOptions-json"
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "openAI_2-input-cache-BaseCache"
          }
        ],
        "inputs": {
          "cache": "",
          "modelName": "gpt-3.5-turbo-instruct",
          "temperature": "0.7",
          "maxTokens": "",
          "topP": "",
          "bestOf": "",
          "frequencyPenalty": "",
          "presencePenalty": "",
          "batchSize": "",
          "timeout": "",
          "basepath": "",
          "baseOptions": ""
        },
        "outputAnchors": [
          {
            "id": "openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
            "name": "openAI",
            "label": "OpenAI",
            "description": "Wrapper around OpenAI large language models",
            "type": "OpenAI | BaseLLM | BaseLanguageModel | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 574,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 2270.0942347039936,
        "y": 335.5356261033887
      }
    },
    {
      "id": "promptTemplate_2",
      "position": {
        "x": 2280.5388098514154,
        "y": 1116.7660092472652
      },
      "type": "customNode",
      "data": {
        "id": "promptTemplate_2",
        "label": "Prompt Template",
        "version": 1,
        "name": "promptTemplate",
        "type": "PromptTemplate",
        "baseClasses": [
          "PromptTemplate",
          "BaseStringPromptTemplate",
          "BasePromptTemplate",
          "Runnable"
        ],
        "category": "Prompts",
        "description": "Schema to represent a basic prompt for an LLM",
        "inputParams": [
          {
            "label": "Template",
            "name": "template",
            "type": "string",
            "rows": 4,
            "placeholder": "What is a good name for a company that makes {product}?",
            "id": "promptTemplate_2-input-template-string"
          },
          {
            "label": "Format Prompt Values",
            "name": "promptValues",
            "type": "json",
            "optional": true,
            "acceptVariable": true,
            "list": true,
            "id": "promptTemplate_2-input-promptValues-json"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "template": "you are a customer support assistant that deals with negative reviews.\nWrite an apology for the following review and ask the user if they would like to be contacted by a customer service rep.\nReview: {review}.",
          "promptValues": ""
        },
        "outputAnchors": [
          {
            "id": "promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
            "name": "promptTemplate",
            "label": "PromptTemplate",
            "description": "Schema to represent a basic prompt for an LLM",
            "type": "PromptTemplate | BaseStringPromptTemplate | BasePromptTemplate | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 513,
      "selected": false,
      "positionAbsolute": {
        "x": 2280.5388098514154,
        "y": 1116.7660092472652
      },
      "dragging": false
    },
    {
      "id": "structuredOutputParser_0",
      "position": {
        "x": 218.8131343843006,
        "y": 720.1864301919896
      },
      "type": "customNode",
      "data": {
        "id": "structuredOutputParser_0",
        "label": "Structured Output Parser",
        "version": 1,
        "name": "structuredOutputParser",
        "type": "StructuredOutputParser",
        "baseClasses": [
          "StructuredOutputParser",
          "BaseLLMOutputParser",
          "Runnable"
        ],
        "category": "Output Parsers",
        "description": "Parse the output of an LLM call into a given (JSON) structure.",
        "inputParams": [
          {
            "label": "Autofix",
            "name": "autofixParser",
            "type": "boolean",
            "optional": true,
            "description": "In the event that the first call fails, will make another call to the model to fix any errors.",
            "id": "structuredOutputParser_0-input-autofixParser-boolean"
          },
          {
            "label": "JSON Structure",
            "name": "jsonStructure",
            "type": "datagrid",
            "description": "JSON structure for LLM to return",
            "datagrid": [
              {
                "field": "property",
                "headerName": "Property",
                "editable": true
              },
              {
                "field": "type",
                "headerName": "Type",
                "type": "singleSelect",
                "valueOptions": [
                  "string",
                  "number",
                  "boolean"
                ],
                "editable": true
              },
              {
                "field": "description",
                "headerName": "Description",
                "editable": true,
                "flex": 1
              }
            ],
            "default": [
              {
                "property": "answer",
                "type": "string",
                "description": "answer to the user's question"
              },
              {
                "property": "source",
                "type": "string",
                "description": "sources used to answer the question, should be websites"
              }
            ],
            "additionalParams": true,
            "id": "structuredOutputParser_0-input-jsonStructure-datagrid"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "autofixParser": "",
          "jsonStructure": "[{\"property\":\"positive\",\"type\":\"boolean\",\"description\":\"the review is positive\",\"actions\":\"\",\"id\":1}]"
        },
        "outputAnchors": [
          {
            "id": "structuredOutputParser_0-output-structuredOutputParser-StructuredOutputParser|BaseLLMOutputParser|Runnable",
            "name": "structuredOutputParser",
            "label": "StructuredOutputParser",
            "description": "Parse the output of an LLM call into a given (JSON) structure.",
            "type": "StructuredOutputParser | BaseLLMOutputParser | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 329,
      "selected": false,
      "positionAbsolute": {
        "x": 218.8131343843006,
        "y": 720.1864301919896
      },
      "dragging": false
    },
    {
      "id": "ifElseFunction_0",
      "position": {
        "x": 1555.148789943095,
        "y": 31.816973467996377
      },
      "type": "customNode",
      "data": {
        "id": "ifElseFunction_0",
        "label": "IfElse Function",
        "version": 1,
        "name": "ifElseFunction",
        "type": "IfElseFunction",
        "baseClasses": [
          "IfElseFunction",
          "Utilities"
        ],
        "category": "Utilities",
        "description": "Split flows based on If Else javascript functions",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "functionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $var",
            "type": "json",
            "optional": true,
            "acceptVariable": true,
            "list": true,
            "id": "ifElseFunction_0-input-functionInputVariables-json"
          },
          {
            "label": "IfElse Name",
            "name": "functionName",
            "type": "string",
            "optional": true,
            "placeholder": "If Condition Match",
            "id": "ifElseFunction_0-input-functionName-string"
          },
          {
            "label": "If Function",
            "name": "ifFunction",
            "description": "Function must return a value",
            "type": "code",
            "rows": 2,
            "default": "if (\"hello\" == \"hello\") {\n    return true;\n}",
            "id": "ifElseFunction_0-input-ifFunction-code"
          },
          {
            "label": "Else Function",
            "name": "elseFunction",
            "description": "Function must return a value",
            "type": "code",
            "rows": 2,
            "default": "return false;",
            "id": "ifElseFunction_0-input-elseFunction-code"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "functionInputVariables": "{\"sentiment\":\"{{llmChain_0.data.instance}}\"}",
          "functionName": "",
          "ifFunction": "if ($sentiment.positive == true) {\n    return true;\n}",
          "elseFunction": "return false;"
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "ifElseFunction_0-output-returnTrue-string|number|boolean|json|array",
                "name": "returnTrue",
                "label": "True",
                "description": "",
                "type": "string | number | boolean | json | array"
              },
              {
                "id": "ifElseFunction_0-output-returnFalse-string|number|boolean|json|array",
                "name": "returnFalse",
                "label": "False",
                "description": "",
                "type": "string | number | boolean | json | array"
              }
            ],
            "default": "returnTrue"
          }
        ],
        "outputs": {
          "output": "returnTrue"
        },
        "selected": false
      },
      "width": 300,
      "height": 757,
      "selected": false,
      "positionAbsolute": {
        "x": 1555.148789943095,
        "y": 31.816973467996377
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "openAI_0",
      "sourceHandle": "openAI_0-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
      "target": "llmChain_0",
      "targetHandle": "llmChain_0-input-model-BaseLanguageModel",
      "type": "buttonedge",
      "id": "openAI_0-openAI_0-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable-llmChain_0-llmChain_0-input-model-BaseLanguageModel"
    },
    {
      "source": "promptTemplate_0",
      "sourceHandle": "promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
      "target": "llmChain_0",
      "targetHandle": "llmChain_0-input-prompt-BasePromptTemplate",
      "type": "buttonedge",
      "id": "promptTemplate_0-promptTemplate_0-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable-llmChain_0-llmChain_0-input-prompt-BasePromptTemplate"
    },
    {
      "source": "openAI_1",
      "sourceHandle": "openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
      "target": "llmChain_1",
      "targetHandle": "llmChain_1-input-model-BaseLanguageModel",
      "type": "buttonedge",
      "id": "openAI_1-openAI_1-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable-llmChain_1-llmChain_1-input-model-BaseLanguageModel"
    },
    {
      "source": "promptTemplate_1",
      "sourceHandle": "promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
      "target": "llmChain_1",
      "targetHandle": "llmChain_1-input-prompt-BasePromptTemplate",
      "type": "buttonedge",
      "id": "promptTemplate_1-promptTemplate_1-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable-llmChain_1-llmChain_1-input-prompt-BasePromptTemplate"
    },
    {
      "source": "openAI_2",
      "sourceHandle": "openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable",
      "target": "llmChain_2",
      "targetHandle": "llmChain_2-input-model-BaseLanguageModel",
      "type": "buttonedge",
      "id": "openAI_2-openAI_2-output-openAI-OpenAI|BaseLLM|BaseLanguageModel|Runnable-llmChain_2-llmChain_2-input-model-BaseLanguageModel"
    },
    {
      "source": "promptTemplate_2",
      "sourceHandle": "promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable",
      "target": "llmChain_2",
      "targetHandle": "llmChain_2-input-prompt-BasePromptTemplate",
      "type": "buttonedge",
      "id": "promptTemplate_2-promptTemplate_2-output-promptTemplate-PromptTemplate|BaseStringPromptTemplate|BasePromptTemplate|Runnable-llmChain_2-llmChain_2-input-prompt-BasePromptTemplate"
    },
    {
      "source": "structuredOutputParser_0",
      "sourceHandle": "structuredOutputParser_0-output-structuredOutputParser-StructuredOutputParser|BaseLLMOutputParser|Runnable",
      "target": "llmChain_0",
      "targetHandle": "llmChain_0-input-outputParser-BaseLLMOutputParser",
      "type": "buttonedge",
      "id": "structuredOutputParser_0-structuredOutputParser_0-output-structuredOutputParser-StructuredOutputParser|BaseLLMOutputParser|Runnable-llmChain_0-llmChain_0-input-outputParser-BaseLLMOutputParser"
    },
    {
      "source": "llmChain_0",
      "sourceHandle": "llmChain_0-output-outputPrediction-string|json",
      "target": "ifElseFunction_0",
      "targetHandle": "ifElseFunction_0-input-functionInputVariables-json",
      "type": "buttonedge",
      "id": "llmChain_0-llmChain_0-output-outputPrediction-string|json-ifElseFunction_0-ifElseFunction_0-input-functionInputVariables-json"
    },
    {
      "source": "ifElseFunction_0",
      "sourceHandle": "ifElseFunction_0-output-returnTrue-string|number|boolean|json|array",
      "target": "promptTemplate_1",
      "targetHandle": "promptTemplate_1-input-promptValues-json",
      "type": "buttonedge",
      "id": "ifElseFunction_0-ifElseFunction_0-output-returnTrue-string|number|boolean|json|array-promptTemplate_1-promptTemplate_1-input-promptValues-json"
    },
    {
      "source": "ifElseFunction_0",
      "sourceHandle": "ifElseFunction_0-output-returnFalse-string|number|boolean|json|array",
      "target": "promptTemplate_2",
      "targetHandle": "promptTemplate_2-input-promptValues-json",
      "type": "buttonedge",
      "id": "ifElseFunction_0-ifElseFunction_0-output-returnFalse-string|number|boolean|json|array-promptTemplate_2-promptTemplate_2-input-promptValues-json"
    }
  ]
}